Procesa una señal con Promedio Móvil, Mediana y EMA

#include <math.h>  // Para usar NAN e isnan()

// ================== CONFIGURACIÓN ==================
const int N = 100;  // Número de datos en la señal
int datos[N] = {
  37, 52, 56, 47, 52, 43, 36, 49, 50, 56, 60, 44, 51, 47, 48, 
  53, 55, 61, 52, 64, 45, 55, 46, 52, 59, 51, 44, 49, 54, 48, 
  56, 57, 54, 42, 58, 41, 43, 55, 54, 59, 45, 64, 51, 53, 56, 
  57, 58, 62, 48, 52, 47, 46, 50, 59, 56, 63, 54, 40, 58, 52, 
  61, 53, 55, 57, 49, 60, 50, 56, 44, 47, 54, 58, 62, 43, 52, 
  46, 51, 56, 57, 59, 48, 54, 55, 60, 61, 63, 65, 67, 68, 70, 
  72, 73, 75, -100, -50, 200, 180, 100, 120, 130
};

// Parámetros de filtros
const int ventana = 3;   // Tamaño ventana (impar)
const float alpha = 0.3; // Factor suavizado EMA

// Resultados
float promedioMovil[N];
int mediana[N];
float ema[N];

// ================== FUNCIONES ==================

// Ordenar arreglo (burbuja)
void ordenar(int arr[], int n) {
  for (int i = 0; i < n-1; i++) {
    for (int j = 0; j < n-i-1; j++) {
      if (arr[j] > arr[j+1]) {
        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
      }
    }
  }
}

// Mediana en ventana
int calcularMediana(int arr[], int inicio, int fin) {
  int tam = fin - inicio + 1;
  int temp[tam];

  for (int i = 0; i < tam; i++) {
    temp[i] = arr[inicio + i];
  }

  for (int i = 0; i < tam-1; i++) {
    for (int j = 0; j < tam-i-1; j++) {
      if (temp[j] > temp[j+1]) {
        int aux = temp[j];
        temp[j] = temp[j+1];
        temp[j+1] = aux;
      }
    }
  }

  if (tam % 2 == 1) return temp[tam/2];
  else return (temp[tam/2 - 1] + temp[tam/2]) / 2;
}

// Promedio Móvil centrado con NaN en bordes
void movingAverage(int *input, float *output, int n, int window) {
  int half = window / 2;
  for (int i = 0; i < n; i++) {
    if (i < half || i >= n - half) {
      output[i] = NAN;
    } else {
      float sum = 0;
      for (int j = -half; j <= half; j++) {
        sum += input[i + j];
      }
      output[i] = sum / window;
    }
  }
}

// ================== PROGRAMA ==================
void setup() {
  Serial.begin(9600);

  // ---- Calcular filtros ----
  movingAverage(datos, promedioMovil, N, ventana);

  for (int i = 0; i < N; i++) {
    if (i < ventana/2 || i >= N - ventana/2) {
      mediana[i] = datos[i];
    } else {
      mediana[i] = calcularMediana(datos, i - ventana/2, i + ventana/2);
    }
  }

  ema[0] = datos[0];
  for (int i = 1; i < N; i++) {
    ema[i] = alpha * datos[i] + (1 - alpha) * ema[i-1];
  }

  // ---- Mostrar tabla de resultados ----
  Serial.println("Idx\tOriginal\tPromMovil\tMediana\tEMA");
  for (int i = 0; i < N; i++) {
    Serial.print(i);
    Serial.print("\t");
    Serial.print(datos[i]);
    Serial.print("\t\t");
    if (isnan(promedioMovil[i])) Serial.print("NaN");
    else Serial.print(promedioMovil[i], 2);
    Serial.print("\t\t");
    Serial.print(mediana[i]);
    Serial.print("\t");
    Serial.println(ema[i], 2);
  }
}

void loop() {
  // Nada aquí, solo se ejecuta setup()
}
